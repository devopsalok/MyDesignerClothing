ext {
  buildToolsVersion = "28.0.3"
  constraintLayoutVersion = '1.1.3'

  unitTestCoverageEnabled = true
  foreseeVersion = '5.0.0'
}

subprojects {
  apply plugin: 'jacoco'
  apply plugin: 'org.sonarqube'

  afterEvaluate {
    if (GlobalConfig.shouldConfigure(it)) {
      it.apply plugin: "com.trevjonez.composer"

      android.defaultConfig.multiDexEnabled true

      android.defaultConfig.ndk {
        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
      }

      android.dataBinding.enabled true

      android.compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
      }

      android.lintOptions {
        abortOnError true
        error 'VisibleForTests'
        warning 'WebViewLayout'
      }


      android.buildToolsVersion buildToolsVersion

      android.buildTypes.each {
        it.buildConfigField "String", "APP_ENV", "\"${GlobalConfig.myDesignerEnv.toLowerCase()}\""
        it.buildConfigField "String", "API_HOST", "\"${GlobalConfig.apiProductionHost}\""
      }

      android.defaultConfig.minSdkVersion versions.coreAndroid.minSdkVersion
      android.defaultConfig.targetSdkVersion versions.coreAndroid.targetSdkVersion

      android.packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
      }

      android.testOptions {
        animationsDisabled = true
        unitTests {
          returnDefaultValues = true
          includeAndroidResources = true
        }
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
      }

      repositories {
        flatDir {
          dirs {
            rootProject.projectDir.absolutePath + "/prebuilt-libs"
          }
        }
      }

      dependencies {
        api "android.arch.lifecycle:livedata:1.1.1"
        api 'commons-io:commons-io:2.5'
        api 'com.google.code.gson:gson:2.8.0'
        api "com.google.dagger:dagger:$versions.di.dagger"
        api ("com.google.dagger:dagger-android:$versions.di.dagger")  {
          exclude group: 'com.google.code.findbugs'
        }
        api ("com.google.dagger:dagger-android-support:$versions.di.dagger") {
          exclude group: 'com.google.code.findbugs'
        }

        annotationProcessor "com.google.dagger:dagger-compiler:$versions.di.dagger"
        annotationProcessor "com.google.dagger:dagger-android-processor:$versions.di.dagger"
        annotationProcessor 'com.google.guava:guava:23.0'

        androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$versions.di.dagger"
        androidTestAnnotationProcessor "com.google.dagger:dagger-android-processor:$versions.di.dagger"

        testImplementation 'junit:junit:4.12'
        testImplementation 'org.hamcrest:hamcrest-library:1.3'
        testImplementation "org.mockito:mockito-core:$versions.testingTools.mockito"
        testImplementation("org.powermock:powermock-api-mockito2:$versions.testingTools.powerMock") {
          exclude module: 'hamcrest-core'
          exclude module: 'objenesis'
        }
        testImplementation("org.powermock:powermock-module-junit4:$versions.testingTools.powerMock") {
          exclude module: 'hamcrest-core'
          exclude module: 'objenesis'
        }

        testImplementation("org.robolectric:robolectric:$versions.testingTools.robolectric") {
          exclude group: 'org.apache.httpcomponents', module: 'httpcore'
          exclude group: 'org.apache.httpcomponents', module: 'httpclient'
          exclude group: 'com.google.auto.service', module: 'auto-service'
        }

        testImplementation 'org.json:json:20160810'

        androidTestImplementation "androidx.test.espresso:espresso-core:$versions.androidX.espressoCore"
        androidTestImplementation "androidx.test.espresso:espresso-intents:$versions.androidX.espressoIntents"
        androidTestImplementation "androidx.test.espresso:espresso-contrib:$versions.androidX.espressoContrib"
        androidTestImplementation "androidx.test.espresso:espresso-web:$versions.androidX.espressoWeb"
        androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$versions.androidX.idlingConcurrent"
        androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$versions.androidX.idlingResource"
        androidTestImplementation "androidx.test:runner:$versions.androidX.testRunner"
        androidTestImplementation "androidx.test:rules:$versions.androidX.testRules"
        androidTestImplementation "androidx.test.uiautomator:uiautomator:$versions.androidX.uiautomator"
        androidTestImplementation "androidx.test.ext:junit:$versions.androidX.junitExt"
        androidTestUtil "androidx.test:orchestrator:$versions.androidX.orchestrator"

        androidTestImplementation "org.mockito:mockito-core:$versions.testingTools.mockito"
        androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
        androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:$versions.testingTools.linkedinDexMaker"
        androidTestImplementation 'com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT'
        androidTestImplementation 'com.natpryce:make-it-easy:4.0.1'
        androidTestImplementation 'xmlunit:xmlunit:1.6'
        androidTestImplementation('com.squareup.okhttp:mockwebserver:2.7.5')
      }

      if (project.unitTestCoverageEnabled) {
        UnitTestCoverageTasks.configure(project)
      }
      IntegrationTestCoverageTasks.configure(project)
      SonarQubeTask.setup(project)
      TaskGraphEnhancer.enhance(project)
    }
  }

  configurations.all {
    resolutionStrategy {
      force 'com.google.code.findbugs:jsr305:3.0.2'
    }
  }

  tasks.withType(Test) {
    afterSuite { desc, result ->
      if (!desc.parent) {
        logger.quiet("Test Results: total:${result.getTestCount()}, passed=${result.getSuccessfulTestCount()}, failed=${result.getFailedTestCount()}")
      }
    }
  }
}
